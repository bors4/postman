{
	"info": {
		"_postman_id": "7cf0a08d-8731-491c-aec1-e5fdcf131eb7",
		"name": "Day 26: Parse HTML response",
		"description": "## Instructions for Day 26: Parse HTML response\n\n1.  **Get the challenge:** Fork [the parent collection `Day 26: Parse HTML response`](https://www.postman.com/postman/workspace/30-days-of-postman-for-developers/documentation/1559645-9f9419fe-5249-4b44-b07f-4cb3ef913c81) from the main workspace to your own public workspace.\n2.  **Read the documentation:** In your fork, select the first folder. Expand the context bar on the right to follow the instructions in the collection documentation.\n3.  **Submit your solution:** Select the second folder `Submit your solution` and follow the instructions in the documentation to validate your solution.\n    \n\n## Concepts covered\n\n*   [Variables](https://learning.postman.com/docs/sending-requests/variables/)\n*   [Scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/)\n*   [Using external libraries](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#using-external-libraries)\n*   [Writing tests](https://learning.postman.com/docs/writing-scripts/test-scripts/)\n    \n\n## Additional resources\n\n*   [Example](https://www.postman.com/postman/workspace/postman-answers/collection/9215231-cd114167-c5a1-495e-a50f-29d6dd5af4e0?ctx=documentation) in Postman Answers workspace\n*   [Check for Broken Links on Your Website Using a Postman Collection](https://blog.postman.com/check-for-broken-links-on-your-website-using-a-postman-collection/) blog\n*   [Parse HTML](https://www.tiktok.com/@joycejetson/video/7075694107703692590) tiktok\n    \n\n## Next challenge\n\n*   [Scenario testing](https://www.postman.com/postman/workspace/30-days-of-postman-for-developers/documentation/1559645-e9968036-7ad8-4daa-97c3-331184213392)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "23721371-7cf0a08d-8731-491c-aec1-e5fdcf131eb7"
	},
	"item": [
		{
			"name": "Parse HTML response",
			"item": [
				{
					"name": "bing",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83bee64e-5298-4ded-a2d4-0fefb3493ab2",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "34e20f5e-a946-4b65-bf94-b2777cfd84cf",
								"exec": [
									"var cheerio = require('cheerio')\r",
									"var links = []\r",
									"\r",
									"const body = `<ol id=\"b_results\">\r",
									"    <li class=\"b_algo\">\r",
									"        <h2><a href=\"TEST\"></a></h2>\r",
									"    </li>\r",
									"     <li class=\"b_algo\">\r",
									"        <h2><a href=\"TEST1\"></a></h2>\r",
									"    </li>\r",
									"    </ol>\r",
									"`\r",
									"\r",
									"//$ = cheerio.load(body);\r",
									"$ = cheerio.load(pm.response.text());\r",
									"\r",
									"$(\"body > #b_content > main > #b_results > li > h2\").find(\"a\").each(function(i, link) {\r",
									"    //console.log($(link).attr(\"href\"))\r",
									"    links = [...links, $(link).attr(\"href\")]\r",
									"})\r",
									"console.log(links)\r",
									"\r",
									"pm.collectionVariables.set(\"links\", links);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Collection variable is array\", function () {\r",
									"    pm.expect(pm.collectionVariables.get(\"links\")).to.be.an('array')\r",
									"})\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "f05bfee1-82a6-4199-b746-a387ac51f289",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://www.bing.com/search?q=Download IE",
							"protocol": "https",
							"host": [
								"www",
								"bing",
								"com"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "q",
									"value": "Download IE"
								}
							]
						}
					},
					"response": []
				}
			],
			"id": "d1aa9deb-1405-4252-a6bd-3c8b7248f4e3",
			"description": "It's time to work on your next challenge.\n\n1. **Add a request**: Add a request called `bing` to the folder `Parse HTML response` with the following details:\n  - `GET` request method\n  - `https://www.bing.com/search` request URL\n  - Query parameter `q` with the value of any term, such as `postman`.\n\n  Hit **Send**, and look at the HTML response in Pretty, Raw, or Preview mode to ensure that you are receiving some search results.\n1. **Scrape web links**: Under the **Tests** tab, write a script using [the built-in library cheerio](https://learning.postman.com/docs/writing-scripts/script-references/postman-sandbox-api-reference/#using-external-libraries) to save all the links in the HTML response as an array. Try to only collect links that are displayed in the search results. And then store the array as a [collection variable](https://learning.postman.com/docs/sending-requests/variables/#variable-scopes) called `links`.\n\n  Hit **Send** to ensure your collection variable contains an array of links. Then [persist the collection variable](https://learning.postman.com/docs/sending-requests/variables/#sharing-and-persisting-data) so that the array is saved with the collection under `INITIAL VALUE` as well as `CURRENT VALUE`.\n1. **Add two tests**: Write a test to ensure a successful response status code from bing. Then write another test to validate the information being stored as a collection variable is formatted as an array. Send the request to make sure the tests pass appropriately, and save your changes. \n\nOnce you complete these steps, move on to the next folder in this collection to submit your solution. Follow the instructions in the request documentation.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "6a1f7f07-3753-4ad0-8ddb-579abb433413"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "5490e7a7-7335-4d0d-90a5-cbb2fd24d6a1"
					}
				}
			]
		},
		{
			"name": "Submit your solution",
			"item": [
				{
					"name": "submit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "06f7d094-a053-48fc-b1dd-334b7bccee8c",
								"exec": [
									"// counter for passed tests\r",
									"let pass = 0\r",
									"let totalToPass = 6\r",
									"\r",
									"let collection = pm.response.json().collection\r",
									"\r",
									"pm.test(\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection. When all of your tests pass, you are done with today's challenge.\", () => {\r",
									"    pm.expect(true);\r",
									"    pass += 1\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pass += 1\r",
									"});\r",
									"\r",
									"pm.test(\"Correct collection returned\", () => {\r",
									"    pm.expect(collection.info.name).equals(\"Day 26: Parse HTML response\")\r",
									"    pass += 1\r",
									"})\r",
									"\r",
									"pm.test(\"Request added correctly\", () => {\r",
									"    pm.expect(collection.item[0].item.length, 'check number of requests').equals(1)\r",
									"\r",
									"    let bingRequest = collection.item[0].item.find(req => { return req.name === \"bing\"})\r",
									"    pm.expect(bingRequest.name, 'check name').equals(\"bing\")\r",
									"    pm.expect(bingRequest.request.method, 'check method').equals(\"GET\")\r",
									"    pm.expect(bingRequest.request.url.raw, 'check url').includes(\"https://www.bing.com/search?q=\")\r",
									"\r",
									"    pass += 1\r",
									"})\r",
									"\r",
									"pm.test(\"Script added correctly\", () => {\r",
									"    let bingRequest = collection.item[0].item.find(req => { return req.name === \"bing\"})\r",
									"\r",
									"    let test = bingRequest.event.find(event => {return event.listen === \"test\"})\r",
									"    pm.expect(test.listen, 'check test script').equals(\"test\")\r",
									"    pm.expect(test.script.exec.toString(), 'check cheerio').to.include(\"cheerio.load\")\r",
									"\t\r",
									"    let collVar = collection.variable.find(variable => { return variable.key === 'links'})\r",
									"\tconsole.log(collVar.value)\r",
									"    pm.expect(collVar.key, 'check collection variable set').to.equal('links')\r",
									"    //value collection variable 'links' is not a JSON\r",
									"\t//pm.expect(JSON.parse(collVar.value), 'check collection variable array').to.be.an('array')\r",
									"\tpm.expect(collVar.value, 'check collection variable array').to.be.an('array')\r",
									"\r",
									"    pass += 1\r",
									"})\r",
									"\r",
									"pm.test(\"Tests added correctly\", () => {\r",
									"    let bingRequest = collection.item[0].item.find(req => { return req.name === \"bing\"})\r",
									"\r",
									"    let test = bingRequest.event.find(event => {return event.listen === \"test\"})\r",
									"\r",
									"    pm.expect(test.script.exec.toString(), 'check tests').to.include(\"pm.test\")\r",
									"\r",
									"    pass += 1\r",
									"})\r",
									"\r",
									"// visualization for test results\r",
									"let template\r",
									"if (pass == totalToPass) {\r",
									"    template = `üç™ passing!\r",
									"        <br />\r",
									"        <img src=\"https://media4.giphy.com/media/9fuvOqZ8tbZOU/giphy.gif?cid=ecf05e473iskrumhqsks5kkf6xvzxx87smuqhwmzpg9s4yv9&rid=giphy.gif&ct=g\" />\r",
									"    `\r",
									"} else {\r",
									"    template = `üôÖ please try again\r",
									"        <br />\r",
									"        <img src=\"https://media1.giphy.com/media/tP3Tu61F2RBZe/giphy.gif?cid=ecf05e47c5swa49om8lx3mvexwarnmxpqzs8zh5qa8a2cjm2&rid=giphy.gif&ct=g\" />\r",
									"    `\r",
									"}\r",
									"pm.visualizer.set(template)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "31ce8cc5-1390-48b2-b72d-8c83d95293e0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{postman_api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/collections/{{collectionUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"{{collectionUid}}"
							]
						},
						"description": "It's time to submit your solution.\n\n1. **Use a Postman environment:** Find the `Postman API env` environment from the previous challenge. Update the `collectionUid` with the current collection's ID.\n1. **Validate your solution**: Save your changes in the collection and environment. Hit **Send** and look under the **Tests** tab of the server response at the bottom to review your test results.\n\nIf you have any failures, review the failed test results or ask for support in the [community forum](https://community.postman.com/). When all of your tests pass, you are done with today's challenge. Remember to save your changes as you'll need to pass all the challenges to claim a **30 days of Postman** badge."
					},
					"response": []
				}
			],
			"id": "5ab38320-0ed6-45ee-89e7-6bcb7a825e85",
			"description": "Follow the instructions in the request documentation."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "f27cf9b5-59ac-4240-b480-75d42e1a9e96",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "38c8c390-8b3c-443a-a510-a41322eaebdc",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "a8bec75a-4394-4807-9632-844f42ddc838",
			"key": "links",
			"value": [
				"https://www.microsoft.com/en-us/download/details.aspx?id=41628",
				"https://www.microsoft.com/en-us/download/internet-explorer.aspx",
				"https://support.microsoft.com/en-us/windows/download-internet-explorer-11-offline-installer-99d492a1-3a62-077b-c476-cf028aff9a7f",
				"https://support.microsoft.com/en-us/windows/internet-explorer-downloads-d49e1f0d-571c-9a7b-d97e-be248806ca70",
				"https://learn.microsoft.com/en-us/troubleshoot/developer/browsers/installation/how-to-repair-or-reinstall-ie",
				"https://www.partitionwizard.com/partitionmanager/internet-explorer-download.html"
			]
		},
		{
			"id": "0e87a498-90df-4b88-96de-299a71707966",
			"key": "collectionUid",
			"value": "23721371-4a298b34-0197-4601-8ca5-9c202ec796aa",
			"type": "string"
		}
	]
}