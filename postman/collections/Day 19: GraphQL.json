{
	"info": {
		"_postman_id": "fe22e55e-81df-4153-9f43-5a8cb97db7a6",
		"name": "Day 19: GraphQL",
		"description": "## Instructions for Day 19: GraphQL\n\n1.  **Get the challenge:** Fork [the parent collection `Day 19: GraphQL`](https://www.postman.com/postman/workspace/30-days-of-postman-for-developers/documentation/1559645-bd7ff4ba-c209-47b3-85d7-514a7ce0f3bf) from the main workspace to your own public workspace.\n2.  **Read the documentation:** In your fork, select the first folder. Expand the context bar on the right to follow the instructions in the collection documentation.\n3.  **Submit your solution:** Select the second folder `Submit your solution` and follow the instructions in the documentation to validate your solution.\n    \n\n## Concepts covered\n\n*   [Querying with GraphQL](https://learning.postman.com/docs/sending-requests/supported-api-frameworks/graphql/)\n    \n\n## Additional resources\n\n*   [GraphQL demo](https://youtu.be/7pUbezVADQs) video\n*   [Working with GraphQL](https://explore.postman.com/templates/1692/working-with-graphql) template\n*   [REST, SOAP, GraphQL ‚Äî Gesundheit!](https://medium.com/better-practices/rest-soap-graphql-gesundheit-6544053f65cf)\n*   [GraphQL vs REST: Overview](https://philsturgeon.uk/api/2017/01/24/graphql-vs-rest-overview/)\n*   [Public GraphQL APIs](https://github.com/APIs-guru/graphql-apis)\n*   [GraphQL](https://www.tiktok.com/@joycejetson/video/7072443227168869678) tiktok\n    \n\n## Next challenge\n\n*   [Documentation](https://www.postman.com/postman/workspace/30-days-of-postman-for-developers/documentation/1559645-0f00502d-d2d8-45fc-bd69-0fbb68eb5733)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "23721371-fe22e55e-81df-4153-9f43-5a8cb97db7a6"
	},
	"item": [
		{
			"name": "GraphQL",
			"item": [
				{
					"name": "graphQL",
					"id": "34e5c217-e9da-471f-9d64-fb7d3e9aaeba",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql"
						},
						"url": {
							"raw": "https://joyce-spotify-graphql.herokuapp.com/graphql",
							"protocol": "https",
							"host": [
								"joyce-spotify-graphql",
								"herokuapp",
								"com"
							],
							"path": [
								"graphql"
							]
						}
					},
					"response": []
				}
			],
			"id": "d45a5cee-4804-455a-abb8-f5de0dce8ecc",
			"description": "It's time to work on your next challenge.\n\nFrequently called an advanced REST client, Postman is actually a tool that handles any calls sent over HTTP. This means that you can use Postman to send SOAP requests or GraphQL queries.\n\n1. **Import a GraphQL schema**: There's a few ways to form a GraphQL query in Postman, such as sending JSON in a `POST` request body or sending an `application/graphql` header. In this challenge, let's [create a GraphQL schema](https://learning.postman.com/docs/sending-requests/supported-api-frameworks/graphql/#importing-graphql-schemas) to enable autocompletion in the next step. Under the **APIs** tab on the left, save this example schema and name it `spotify`.\n    \n    ``` graphql\n     type Query {\n     # Just returns \"Hello world!\"\n     hi(message: String = \"Hi\"): String\n     queryArtists(byName: String = \"Red Hot Chili Peppers\"): [Artist]\n     }\n     type Artist {\n     name: String!\n     id: ID\n     image: String\n     albums(limit: Int = 10): [Album]\n     }\n     type Album {\n     name: String\n     id: ID\n     image: String\n     tracks: [Track]\n     }\n     type Track {\n     name: String!\n     artists: [Artist]\n     preview_url: String\n     id: ID\n     }\n    \n    ```\n    \n2. **Add a request**: Return to the collection folder `GraphQL` and create a request `graphQL` with the following details.\n    \n    - `POST` method\n    - `https://joyce-spotify-graphql.herokuapp.com/graphql` request URL\n    - `GraphQL` request body\n    \n    Under the **Body** tab, select your new GraphQL schema from the dropdown. Refresh by clicking on the adjacent icon.\n3. **Edit a query**: Copy and paste the following query under the `Body` tab, or type it in manually to see how Postman suggests autocomplete options from the data within your GraphQL schema. Then update the GraphQL variable to return information about a different artist. Make sure your query returns information successfully, and then save your changes.\n    \n\n``` graphql\nquery getByArtist($name: String!) {\n    queryArtists (byName: $name) {\n        name\n        image\n        albums {\n            name\n        }\n        name\n        image\n        albums {\n            name\n        }\n    }\n}\n\n```\n\nThis query uses a GraphQL variable defined like this:\n\n``` graphql\n{\"name\": \"Britney Spears\"} \n```\n\nOnce you complete these steps, move on to the next folder in this collection to submit your solution. Follow the instructions in the request documentation.",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "e11fd546-233b-41e5-98b0-a6c2e84ef071"
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						],
						"id": "e30a4485-388e-47cd-8996-5116c7504f83"
					}
				}
			]
		},
		{
			"name": "Submit your solution",
			"item": [
				{
					"name": "submit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fc2dcae-0d55-4985-b7da-69318b8cff38",
								"exec": [
									"// counter for passed tests\r",
									"let pass = 0\r",
									"let totalToPass = 5\r",
									"\r",
									"let collection = pm.response.json().collection\r",
									"\r",
									"pm.test(\"If you have any failures, review the failed test results or ask for support in the community forum. Remember to save your changes if you update the collection. When all of your tests pass, you are done with today's challenge.\", () => {\r",
									"    pm.expect(true);\r",
									"    pass += 1\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.response.to.have.status(200);\r",
									"    pass += 1\r",
									"});\r",
									"\r",
									"pm.test(\"Correct collection returned\", () => {\r",
									"    pm.expect(collection.info.name).equals(\"Day 19: GraphQL\")\r",
									"    pass += 1\r",
									"})\r",
									"\r",
									"pm.test(\"Request added correctly\", () => {\r",
									"\tpm.expect(collection.item[0].item.length, 'check number of requests').equals(1)\r",
									"\r",
									"    let graphQLRequest = collection.item[0].item.find(req => { return req.name === \"graphQL\"})\r",
									"    pm.expect(graphQLRequest.name, 'check name').equals(\"graphQL\")\r",
									"\r",
									"    pass += 1\r",
									"})\r",
									"\r",
									"pm.test(\"Query added correctly\", () => {\r",
									"    let request = collection.item[0].item.find(req => { return req.name === \"graphQL\"})\r",
									"\r",
									"    pm.expect(request.request.url.raw, 'check url').equals(\"https://joyce-spotify-graphql.herokuapp.com/graphql\")\r",
									"    pm.expect(request.request.method, 'check method').equals(\"POST\")\r",
									"    pm.expect(request.request.body.mode, 'check mode').equals(\"graphql\")\r",
									"    pm.expect(request.request.body.graphql.query.toString(), 'check query').includes(\"query getByArtist($name: String!)\")\r",
									"    pm.expect(JSON.parse(request.request.body.graphql.variables), 'check variable').includes.property(\"name\")\r",
									"    pm.expect(JSON.parse(request.request.body.graphql.variables), 'check variable changed').to.not.include({\"name\": \"Britney Spears\"})\r",
									"\r",
									"\r",
									"    pass += 1\r",
									"})\r",
									"\r",
									"// visualization for test results\r",
									"let template\r",
									"if (pass == totalToPass) {\r",
									"    template = `üç™ passing!\r",
									"        <br />\r",
									"        <img src=\"https://media3.giphy.com/media/1P00ZTh1zpww2bnT2v/giphy.gif?cid=ecf05e47l9kgivpu27xjl1dibt9q49l3br0nzuiubz8cwmpm&rid=giphy.gif&ct=g\" />\r",
									"    `\r",
									"} else {\r",
									"    template = `üôÖ please try again\r",
									"        <br />\r",
									"        <img src=\"https://media2.giphy.com/media/hXO0qBbhWOE24ON3P3/giphy.gif?cid=ecf05e47p81kuwt0tpywnehl8tnmx0zeppr2s37mlf37of7r&rid=giphy.gif&ct=g\" />\r",
									"    `\r",
									"}\r",
									"pm.visualizer.set(template)"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "70acc1b7-b1ec-4e73-bd2e-ffc6f6a75b50",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{postman_api_key}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/collections/{{collectionUid}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"collections",
								"{{collectionUid}}"
							]
						},
						"description": "It's time to submit your solution.\n\n1. **Use a Postman environment:** Find the `Postman API env` environment from the previous challenge. Update the `collectionUid` with the current collection's ID.\n1. **Validate your solution**: Save your changes in the collection and environment. Hit **Send** and look under the **Tests** tab of the server response at the bottom to review your test results.\n\nIf you have any failures, review the failed test results or ask for support in the [community forum](https://community.postman.com/). When all of your tests pass, you are done with today's challenge. Remember to save your changes as you'll need to pass all the challenges to claim a **30 days of Postman** badge."
					},
					"response": []
				}
			],
			"id": "881fbbb8-03c5-4f43-8855-7957360ebf1d",
			"description": "Follow the instructions in the request documentation."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "57a94737-8e22-4425-9a6a-ca86c1925349",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "056354b8-96f5-47ab-a6d4-9f09a5e07419",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7beebe26-01ba-4dab-818d-afd87767eabf",
			"key": "collectionUid",
			"value": "23721371-14b18a59-102a-4bd7-82b1-088082deb43e",
			"type": "string"
		}
	]
}